1. Write a query that returns the number of unique users per client per month

select client_id, month(time_id) as month, count(distinct user_id) as no_of_users
from fact_events
group by client_id, month(time_id);

2. Write a query to return all Customers (cust_id) who are violating primary key constraints in the Customer Dimension (dim_customer) i.e. those Customers who are present more than once in the Customer Dimension.
For example if cust_id 'C123' is present thrice then the query should return 'C123' | '3' as output.

select cust_id, count(*) as no_of_occurences 
from dim_customer
group by cust_id
having no_of_occurences > 1;

3. Find the date when Apple's opening stock price reached its maximum

select date 
from aapl_historical_stock_price
where open = (select max(open) from aapl_historical_stock_price);

4. Count the number of user events performed by MacBookPro users.
Output the result along with the event name.
Sort the result based on the event count in the descending order.

select event_name, count(*) as no_of_users
from playbook_events
where device = 'macbook pro'
group by event_name
order by no_of_users desc;

5. Find the details of each customer regardless of whether the customer made an order. Output the customer's first name, last name, and the city along with the order details.
You may have duplicate rows in your results due to a customer ordering several of the same items. Sort records based on the customer's first name and the order details in ascending order.

select c.first_name, c.last_name, c.city, o.order_details 
from customers c
left join orders o
on c.id = o.cust_id
order by c.first_name asc;

6. Write a query that returns a number of users who are exclusive to only one client. Output the client_id and number of exclusive users.

select f.client_id, count(distinct f.user_id) 
from (select user_id, count(distinct client_id) 
      from fact_events
      group by user_id
      having count(distinct client_id) = 1) e
left join fact_events f
on e.user_id = f.user_id
group by client_id;

7. Write a query that returns a list of the bottom 2 companies by mobile usage. Company is defined in the customer_id column. Mobile usage is defined as the number of events registered on a client_id == 'mobile'. Order the result by the number of events ascending.
In the case where there are multiple companies tied for the bottom ranks (rank 1 or 2), return all the companies. Output the customer_id and number of events.

select f.customer_id, f.mobile_usage 
from (select customer_id, count(*) as mobile_usage,
      dense_rank() over(order by count(*) asc) usage_rank
      from fact_events
      where client_id = 'mobile'
      group by customer_id
      order by usage_rank) f
where usage_rank < 3;

8. Find customers who appear in the orders table more than three times.

select cust_id, count(*) as freq 
from orders
group by cust_id
having freq > 3;

9. Find customers who have never made an order.
Output the first name of the customer.

select c.first_name 
from customers c
left join orders o
on c.id = o.cust_id
where o.order_details is null;

10. Find the number of male and female employees per department and also their corresponding total salaries.
Output department names along with the corresponding number of female employees, the total salary of female employees, the number of male employees, and the total salary of male employees.

select f.department, f.no_female_employees, f.total_salary_female, 
       m.no_male_employees, m.total_salary_male 
from (select department, count(distinct id) as no_male_employees, 
             sum(salary) as total_salary_male 
      from employee
      where sex = 'M'
      group by department) m
join (select department, count(distinct id) as no_female_employees, 
             sum(salary) as total_salary_female 
      from employee
      where sex = 'F'
      group by department) f
on m.department = f.department;

11. Find the number of speakers of each language by country. Output the country, language, and the corresponding number of speakers. Output the result based on the country in ascending order.

select e.location, u.language, count(distinct e.user_id) 
from playbook_events e
join playbook_users u
on e.user_id = u.user_id
group by e.location, language
order by e.location;

12. Find how many events happened on MacBook-Pro per company in Argentina from users that do not speak Spanish.
Output the company id, language of users, and the number of events performed by users.

select u.company_id, u.language, count(*) as no_of_events 
from playbook_events e
join playbook_users u
on e.user_id = u.user_id
where e.device = 'macbook pro' and
e.location = 'Argentina' and
u.language != 'spanish'
group by u.company_id;

13. Find the number of Apple product users and the number of total users with a device and group the counts by language. Assume Apple products are only MacBook-Pro, iPhone 5s, and iPad-air. Output the language along with the total number of Apple users and users with any device. Order your results based on the number of total users in descending order.

select t.language, coalesce(a.apple_users, 0) as apple_users, t.total_users 
from (
select u.language, count(distinct e.user_id) as total_users 
from playbook_events e
join playbook_users u
on e.user_id = u.user_id
group by u.language) t
left join (
select u.language, count(distinct f.user_id) as apple_users
from (
select * from playbook_events
where device = 'macbook pro' or device = 'iphone 5s' or device =  'ipad air') f
join playbook_users u
on f.user_id = u.user_id
group by u.language) a
on t.language = a.language
order by total_users desc;

14. Calculate the share of new and existing users for each month in the table. Output the month, share of new users, and share of existing users as a ratio.
New users are defined as users who started using services in the current month (there is no usage history in previous months). Existing users are users who used services in current month, but they also used services in any previous month.
Assume that the dates are all from the year 2020.
HINT: Users are contained in user_id column

select tu.month, (nu.new_users/tu.total_users) as share_new_users, 
       (1-(nu.new_users/tu.total_users)) as share_exist_users
from (select month(time_id) as month, count(distinct user_id) as total_users
      from fact_events
      group by month(time_id)) tu
join (select n.start_month, count(distinct n.user_id) as new_users
      from (select user_id, month(min(time_id)) as start_month 
            from fact_events
            group by user_id) n
      group by n.start_month) nu
on tu.month = nu.start_month

15. Select the most popular client_id based on a count of the number of users who have at least 50% of their events from the following list: 'video call received', 'video call sent', 'voice call received', 'voice call sent'.

select f.client_id
from (select t.user_id, (c.no_calls/t.total) as call_share
      from (select user_id, count(event_type) as total 
            from fact_events
            group by user_id) t
      join (select user_id, count(event_type) as no_calls 
            from fact_events
            where event_type = 'video call received' or
                  event_type = 'video call sent' or
                  event_type = 'voice call received' or
                  event_type = 'voice call sent'
            group by user_id) c
      on t.user_id = c.user_id
      having call_share >= 0.5) e
join fact_events f
on e.user_id = f.user_id
group by f.client_id
order by count(distinct e.user_id) desc
limit 1;

